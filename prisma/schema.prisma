// This is the Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User account details
model User {
  id               Int               @id @default(autoincrement())
  kindeId          String            @unique
  username         String            @unique
  email            String            @unique
  name             String
  role             String            @default("basic") // TODO enum not supported on sqlite, (basic, middleman, admin)
  sellerDetails    SellerDetails?
  buyerDetails     BuyerDetails?
  middlemanDetails MiddlemanDetails?
}

// Contains records for a buyer 
model BuyerDetails {
  id            Int     @id @default(autoincrement())
  userId        String  @unique
  purchaseCount Int     @default(0)
  orders        Order[] // orders for a purchase
  user          User    @relation(fields: [userId], references: [kindeId])
}

// Contains records for a seller
model SellerDetails {
  id         Int       @id @default(autoincrement())
  userId     String    @unique
  saleCount  Int       @default(0)
  sellerType String    @default("new") // TODO convert to enum, (new, experienced)
  products   Product[] // seller can have many products
  orders     Order[] // seller can have many orders for sale
  user       User      @relation(fields: [userId], references: [kindeId])
}

model Product {
  id            Int           @id @default(autoincrement())
  title         String
  description   String
  price         Float
  imagePath     String
  sellerId      String
  orderItems    OrderItem[] // product can belong to many order item, bought multiple times
  sellerDetails SellerDetails @relation(fields: [sellerId], references: [userId])
}

// records for a middleman
model MiddlemanDetails {
  id              Int     @id @default(autoincrement())
  userId          String  @unique
  ordersProcessed Int     @default(0)
  orders          Order[] // orders to process
  user            User    @relation(fields: [userId], references: [kindeId])
}

// Order has one OrderItem atm
model Order {
  id               Int              @id @default(autoincrement())
  totalAmount      Float
  buyerId          String
  sellerId         String
  middlemanId      String
  orderDate        DateTime         @default(now())
  status           String           @default("pending") // TODO enum (pending, shipped, rejected)
  orderItems       OrderItem[] // An Order can have many order items in it
  middlemanDetails MiddlemanDetails @relation(fields: [middlemanId], references: [userId])
  buyerDetails     BuyerDetails     @relation(fields: [buyerId], references: [userId])
  sellerDetails    SellerDetails    @relation(fields: [sellerId], references: [userId])
}

// captures the state when a product is transacted
model OrderItem {
  id        Int     @id @default(autoincrement())
  priceSold Float
  orderId   Int
  productId Int // TODO might need to save fields in case of delete
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
